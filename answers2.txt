6.What is the octal representation of a file that can be read and written only by its owner?
	600
	
7.In UNIX systems, what is the common name of the special user that can access and modify every file?
	root

8.Which file permission classes are available in UNIX systems?
	user, group and others

9.As of 2020, which percentage of servers have UNIX-like OS?
	More than 70%
	
10.The command ssh will:
	ssh stands for Secure Shell and the command will open a secure and encrypted connection
	between two hosts, where you can access remote terminal, file transfers and other tunneling.
	On linux the ssh command defaults to remote terminal.
	You will need a username, and normally a password to connect.

11.UNIX Command: access your current working directory
	pwd
	
12.UNIX Command: rename files (give an example)
	mv file1 newfile1 (By using move we can rename)
	
13.UNIX Command: schedule the execution of programs in the future
	at
	for instance at: 6pm tomorrow
	then you type in the commands to execute, and hit Control+D

14.UNIX Command: Forcefully shutdown the command with process ID 123
	kill -9 123
	SIGKILL is not catchable or ignorable, making it forceful

15.UNIX Command:access your root user
	sudo
	
16. Crontab scheduled: At minute 30 on Sunday.
	30 * * * 0 command_to_execute

17. Crontab scheduled: At minute 30 on day-of-month 15.
	30 * 15 * * command_to_execute

18. Crontab scheduled: At 05:30 on every day-of-week from Sunday through Monday in June.
	30 5 * 6 0-1 command_to_execute

19.Script:printyour name and date
	#!/bin/bash
	NAME="Ola Hulleberg"
	echo "Name: $NAME | Date: $(date)"

20.Script:add two numeric values, print the result
	#!/bin/bash
	echo $((3+5))

21.Script:inputs username, prints “USERNAMEstored”
	#!/bin/bash
	read USERNAME
	echo $USERNAME"stored"

22.Script:Store the output of the command “hostname” in a variable. Display “This script is running on _.” where “_” is the output of the “hostname” command.
	#!/bin/bash
	hostvar=$(hostname)
	echo "This script is running on $hostvar."

23.Script:Store the output of the workingdirectory (from where the script is run) in a variable then print the variable.
	#!/bin/bash
	workingdir=$(pwd)
	echo $workingdir

24.Create a step by step tutorial on how to create a cronjob that prints “Task scheduled at”+ DATE. Cronjob is scheduled every 30 minutes on today’s date(only today).
	To create a new cron job, you will have to access your crontab    
	1. But first, run this command to retrieve the cronjob parameters:
		echo "*/30 * $(date +%d) $(date +%m) * echo \"Task scheduled at "'$(date)'"\""
	
	2. Copy and paste the output and append it to the bottom of your crontab
	Which you can open up by pasting this command:
	!! BEWARE THAT PASTING THIS COMMAND MIGHT CLEAR YOUR TERMINAL !!
	!! 		  However, in most cases you can just scroll up  	  !!
		crontab -e
	
	3. Now make sure crontab is running by using this command:
		sudo systemctl status crond
	
	If it says active (running) near the top left corner, breathe out, YOU ARE DONE
	
	If it says inactive (dead) near the top left corner, well, lets try starting it.
	
	4. !!ONLY IF INACTIVE!! - Run this command to start the service
		sudo service crond start
		
	Now you can go back to step 3 and retry.
	If it fails again, you might have to read the status message to get a bearing
	on what's going wrong.
    

25.Create a script that takes an input (letter or number) that will display the answer of a question. The script should when started list a menu for the user with the different questions that can be chosen and which corresponding letter the user will have to give as input to display the answer of the desired question. One of the possible inputs the user should be able to make is "q" for quitting the script. The menu should also have a defaultcase where all the items is displayed again,or no changes is made if the user gives an invalid input.Hint: use a switch case to be able to handle the menu. Each option in the menu should lead to an echo of the answer
	#!/bin/bash

	declare -A question ans

	# Question 1
	question+=([1]="What is 3+7?")
	ans+=([1]="10")

	# Question 2
	question+=([2]="How tall is Mt. Everest?")
	ans+=([2]="8848 meters")

	# Question 3
	question+=([3]="Which country is the largest in size?")
	ans+=([3]="Russia")

	# Question 4
	question+=([4]="Which country has the largest population?")
	ans+=([4]="China")

	show_menu() {
		clear
		echo
		echo -e "\e[1mChoose a question from the list below:\e[0m"
		echo
		i=1
		for var in "${question[@]}"
		do
			echo "$i.	${var}"
			let "i++"
		done
		echo
		echo "Enter choice [ 1 - 4 ]"
		read RESULT
	
		local __resultvar=$1
		eval $__resultvar="'$RESULT'"
	}

	output_question() {
		id=$1

		clear
		echo
		echo -e "\e[1m${question[$id]}"
		echo -e "Answer:\e[0m \e[33m${ans[$id]}\e[39m"
		echo
		echo
		echo "Press any key to continue."
		read
	}

	while [ true ] ; do
		show_menu choice
		case $choice in
			q)	exit ;;
			*)	if [ -z "${question[$choice]}" ] # Check if question is set, if not loop again
				then
					continue
				else
					output_question $choice
			fi
		esac		
	done
